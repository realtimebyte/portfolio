{"mappings":"ysCAAA,IAAAA,EAAAC,EAAA,kD,qDAOaC,I,wCAiGAC,I,uDArGb,MAAMC,EAAOH,EAAQ,oBAIRC,GAHHD,EAAQ,mBAGoCI,OACpDC,UACAC,UACAC,eAHoDH,GAiGzCF,EAAmDE,OAASI,QAAOC,UAASJ,cAC1E,eAAVG,GAAoC,iBAAVA,GAC3BH,EAAQK,iBAAiB,CACvBC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,iBACNC,IAAKL,EAAQM,QAEf,CACEF,KAAM,YACNC,IAAKL,EAAQM,QAEf,CACEF,KAAM,YACNC,IAAKL,EAAQM,YAOvBV,EAAQK,iBAAiB,CACvBM,QAAS,CACPC,MAAO,CACL,cAAed,EAAKa,QAAQE,EAAW,kBACvC,UAAWf,EAAKa,QAAQE,EAAW,cACnC,SAAUf,EAAKa,QAAQE,EAAW,aAClC,SAAUf,EAAKa,QAAQE,EAAW,aAClC,SAAUf,EAAKa,QAAQE,EAAW,aAClC,UAAWf,EAAKa,QAAQE,EAAW,iBAGzC,C,wICzIFC,EAAQC,eAAiB,SAAUC,GACjC,OAAOA,GAAKA,EAAEC,WAAaD,EAAI,CAACE,QAASF,EAC3C,EAEAF,EAAQK,kBAAoB,SAAUH,GACpCI,OAAOC,eAAeL,EAAG,aAAc,CAACM,OAAO,GACjD,EAEAR,EAAQS,UAAY,SAAUC,EAAQC,GAcpC,OAbAL,OAAOM,KAAKF,GAAQG,SAAQ,SAAUC,GACxB,YAARA,GAA6B,eAARA,GAAwBH,EAAKI,eAAeD,IAIrER,OAAOC,eAAeI,EAAMG,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,EAChB,GAEJ,IAEOH,CACT,EAEAX,EAAQkB,OAAS,SAAUP,EAAMQ,EAAUF,GACzCX,OAAOC,eAAeI,EAAMQ,EAAU,CACpCH,YAAY,EACZC,IAAKA,GAET,C","sources":["gatsby-node.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import { Actions, GatsbyNode, Reporter } from 'gatsby';\nimport { node } from 'prop-types';\nimport { Configuration as WebpackConfig } from 'webpack';\nconst path = require('path');\nconst _ = require('lodash');\n\n\nexport const createPages: GatsbyNode['createPages'] = async ({\n  actions,\n  graphql,\n  reporter\n}) => {\n  // const { createPage } = actions;\n  // const postTemplate = path.resolve(`src/templates/posts.js`);\n  // const tagTemplate = path.resolve(`src/templates/tag.js`);\n\n  // const result = await graphql(`\n  //   {\n  //     postsRemark: allMarkdownRemark(\n  //       filter: { fileAbsolutePath: { regex: \"/content/posts/\"}}\n  //       sort: { order: DESC, fields: [frontendmatter___date]}\n  //       limit: 1000\n  //     ) {\n  //       edges {\n  //         node {\n  //           frontmatter{\n  //             slug\n  //           }\n  //         }\n  //       }\n  //     }\n\n  //     tagsGroup: allMarkdownRemark(limit: 2000) {\n  //       group(field: frontmatter___tags){\n  //         fieldValue\n  //       }\n  //     }\n  //   }\n  // `);\n\n  // if (result.errors) {\n  //   reporter.panicOnBuild(`Error while running GraphQL query.`);\n  // }\n\n  // const posts = result.data?.postsRemark.edges;\n\n  // posts.forEach(({ node }) => {\n  //   createPage({\n  //     path: node.frontmatter.slug,\n  //     component: postTemplate,\n  //     context: {},\n  //   });\n  // });\n\n  // // Extract tag data from query\n  // const tags = result.data?.tagsGroup.group;\n  // // Make tag pages\n  // tags.forEach(tag => {\n  //   createPage({\n  //     path: `/pensieve/tags/${_.kebabCase(tag.fieldValue)}/`,\n  //     component: tagTemplate,\n  //     context: {\n  //       tag: tag.fieldValue,\n  //     },\n  //   });\n  // });\n\n  // if(result.errors) {\n  //   reporter.panicOnBuild(`Error while running GraphQL Query`);\n  //   return;\n  // }\n\n  // const posts = result.data.postsMark.edges;\n\n  // posts.forEach(({data}) => {\n  //   createPage({\n  //     path: node.frontmatter.slug,\n  //   });\n  // })\n}\n\n\ninterface NodeAPI {\n  actions: Actions;\n}\n\ninterface OnCreateWebpackConfig extends NodeAPI {\n  stage: 'develop' | 'develop-html' | 'build-html' | 'build-javascript';\n  rules: {\n    [name: string]: Function\n  };\n  loaders: {\n    [name: string]: Function\n  };\n  plugins: {\n    [name: string]: Function\n  };\n  getConfig(): WebpackConfig;\n}\n\ntype onCreateWebpackConfigType = (\n  parameters: OnCreateWebpackConfig\n) => Promise<void>;\n\nexport const onCreateWebpackConfig: onCreateWebpackConfigType = async ({ stage, loaders, actions, }): Promise<void> => {\n  if(stage === 'build-html' || stage === 'develop-html') {\n    actions.setWebpackConfig({\n      module: {\n        rules: [\n          {\n            test: '/scrollreveal/',\n            use: loaders.null()\n          },\n          {\n            test: '/animejs/',\n            use: loaders.null(),\n          },\n          {\n            test: '/miniraf/',\n            use: loaders.null()\n          }\n        ]\n      }\n    });\n  }\n\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@components': path.resolve(__dirname, 'src/components'),\n        '@styles': path.resolve(__dirname, 'src/styles'),\n        '@fonts': path.resolve(__dirname, 'src/fonts'),\n        '@hooks': path.resolve(__dirname, 'src/hooks'),\n        '@utils': path.resolve(__dirname, 'src/utils'),\n        '@config': path.resolve(__dirname, 'src/config'),\n      }\n    }\n  })\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["parcelHelpers","require","createPages","onCreateWebpackConfig","path","async","actions","graphql","reporter","stage","loaders","setWebpackConfig","module","rules","test","use","null","resolve","alias","$parcel$__dirname","exports","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","value","exportAll","source","dest","keys","forEach","key","hasOwnProperty","enumerable","get","export","destName"],"version":3,"file":"gatsby-node.js.map","sourceRoot":"../../"}