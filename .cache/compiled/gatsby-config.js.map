{"mappings":"usCAAAA,EAAA,kD,qBACA,IAAAC,EAAAD,EAAA,iB,mDAIA,MAAME,EAAuB,CAC3BC,aAAc,CACZC,MAAO,YACPC,YAAa,uGACbC,QAAS,6BACTC,MAAO,WACPC,gBAAiB,eAKnBC,gBAAgB,EAChBC,QAAS,CACP,6BACA,kCACA,sBACA,sBACA,2BACA,wBACA,2BACA,CACEC,QAAS,yBACTC,QAAS,CACPC,KAAM,kBACNC,WAAY,kBACZC,UAAW,IACXC,iBAAkBf,EAAAgB,OAAOC,SACzBC,YAAalB,EAAAgB,OAAOG,KACpBC,QAAS,aACTC,KAAM,wBAGV,wBACA,CACEX,QAAS,2BACTC,QAAS,CACPC,KAAM,SACNU,KAAM,GAAGC,iBAGb,CACEb,QAAS,2BACTC,QAAS,CACPC,KAAM,UACNU,KAAM,GAAGC,eAGb,CACEb,QAAS,2BACTC,QAAS,CACPC,KAAM,QACNU,KAAM,GAAGC,oBAGb,CACEb,QAAS,2BACTC,QAAS,CACPC,KAAM,WACNU,KAAM,GAAGC,uBAGb,CACEb,QAAS,4BACTC,QAAS,CACPF,QAAS,CACP,CAEEC,QAAS,+BACTC,QAAS,CACPa,OAAQ,SACRC,IAAK,iCAGT,CAEEf,QAAS,uBACTC,QAAS,CACPe,SAAU,IACVC,sBAAsB,EACtBC,QAAS,GACTC,UAAW,CAAEC,MAAO9B,EAAAgB,OAAOe,SAG/B,CAEErB,QAAS,6BAEX,CAEEA,QAAS,wBACTC,QAAS,CAQPqB,YAAa,YAObC,iBAAkB,KAKlBC,QAAS,CAAC,EAQVC,iBAAiB,EAGjBC,mBAAmB,EAKnBC,mBAAoB,CAClB,CACEC,SAAU,cACVC,OAAQ,aACRC,WAAY,CACVC,kBAAmB,eAErBC,aAAc,CACZC,SAAU,CACRC,qBAAsB,0BAO9BC,OAAQ,CACNC,KAAM,OACNC,KAAM,YACNC,QAAQ,U,UAUT/C,C,yJChKfgD,EAAQC,eAAiB,SAAUC,GACjC,OAAOA,GAAKA,EAAEC,WAAaD,EAAI,CAACE,QAASF,EAC3C,EAEAF,EAAQK,kBAAoB,SAAUH,GACpCI,OAAOC,eAAeL,EAAG,aAAc,CAACM,OAAO,GACjD,EAEAR,EAAQS,UAAY,SAAUC,EAAQC,GAcpC,OAbAL,OAAOM,KAAKF,GAAQG,SAAQ,SAAUC,GACxB,YAARA,GAA6B,eAARA,GAAwBH,EAAKI,eAAeD,IAIrER,OAAOC,eAAeI,EAAMG,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,EAChB,GAEJ,IAEOH,CACT,EAEAX,EAAQkB,OAAS,SAAUP,EAAMQ,EAAUF,GACzCX,OAAOC,eAAeI,EAAMQ,EAAU,CACpCH,YAAY,EACZC,IAAKA,GAET,C","sources":["gatsby-config.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import type { GatsbyConfig } from \"gatsby\"\nimport { colors } from \"@config/index\"\n\n\n\nconst config: GatsbyConfig = {\n  siteMetadata: {\n    title: `Portfolio`,\n    description: `LingZhi Jin is a software engineer who specializes in building (and ocassionally designing) websites`,\n    siteUrl: `https://www.yourdomain.tld`,\n    image: './og.png',\n    twitterUsername: '@zinlingzhi'\n  },\n  // More easily incorporate content into your pages through automatic TypeScript type generation and better GraphQL IntelliSense.\n  // If you use VSCode you can also use the GraphQL plugin\n  // Learn more at: https://gatsby.dev/graphql-typegen\n  graphqlTypegen: true,\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    `gatsby-plugin-styled-components`,\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sitemap`,\n    `gatsby-plugin-robots-txt`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: 'Brittany Chiang',\n        short_name: 'Brittany Chiang',\n        start_url: '/',\n        background_color: colors.darkNavy,\n        theme_color: colors.navy,\n        display: 'minimal-ui',\n        icon: 'src/images/logo.png',\n      },\n    },\n    `gatsby-plugin-offline`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    {\n      resolve: 'gatsby-source-filesystem',\n      options: {\n        name: 'content',\n        path: `${__dirname}/content/`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/content/posts`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `projects`,\n        path: `${__dirname}/content/projects`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            // https://www.gatsbyjs.org/packages/gatsby-remark-external-links\n            resolve: 'gatsby-remark-external-links',\n            options: {\n              target: '_blank',\n              rel: 'nofollow noopener noreferrer',\n            },\n          },\n          {\n            // https://www.gatsbyjs.org/packages/gatsby-remark-images\n            resolve: 'gatsby-remark-images',\n            options: {\n              maxWidth: 700,\n              linkImagesToOriginal: true,\n              quality: 90,\n              tracedSVG: { color: colors.green },\n            },\n          },\n          {\n            // https://www.gatsbyjs.org/packages/gatsby-remark-code-titles/\n            resolve: 'gatsby-remark-code-titles',\n          }, // IMPORTANT: this must be ahead of other plugins that use code blocks\n          {\n            // https://www.gatsbyjs.org/packages/gatsby-remark-prismjs\n            resolve: `gatsby-remark-prismjs`,\n            options: {\n              // Class prefix for <pre> tags containing syntax highlighting;\n              // defaults to 'language-' (e.g. <pre class=\"language-js\">).\n              // If your site loads Prism into the browser at runtime,\n              // (e.g. for use with libraries like react-live),\n              // you may use this to prevent Prism from re-processing syntax.\n              // This is an uncommon use-case though;\n              // If you're unsure, it's best to use the default value.\n              classPrefix: 'language-',\n              // This is used to allow setting a language for inline code\n              // (i.e. single backticks) by creating a separator.\n              // This separator is a string and will do no white-space\n              // stripping.\n              // A suggested value for English speakers is the non-ascii\n              // character 'â€º'.\n              inlineCodeMarker: null,\n              // This lets you set up language aliases.  For example,\n              // setting this to '{ sh: \"bash\" }' will let you use\n              // the language \"sh\" which will highlight using the\n              // bash highlighter.\n              aliases: {},\n              // This toggles the display of line numbers globally alongside the code.\n              // To use it, add the following line in gatsby-browser.js\n              // right after importing the prism color scheme:\n              //  require(\"prismjs/plugins/line-numbers/prism-line-numbers.css\")\n              // Defaults to false.\n              // If you wish to only show line numbers on certain code blocks,\n              // leave false and use the {numberLines: true} syntax below\n              showLineNumbers: false,\n              // If setting this to true, the parser won't handle and highlight inline\n              // code used in markdown i.e. single backtick code like `this`.\n              noInlineHighlight: false,\n              // This adds a new language definition to Prism or extend an already\n              // existing language definition. More details on this option can be\n              // found under the header \"Add new language definition or extend an\n              // existing language\" below.\n              languageExtensions: [\n                {\n                  language: 'superscript',\n                  extend: 'javascript',\n                  definition: {\n                    superscript_types: /(SuperType)/,\n                  },\n                  insertBefore: {\n                    function: {\n                      superscript_keywords: /(superif|superelse)/,\n                    },\n                  },\n                },\n              ],\n              // Customize the prompt used in shell output\n              // Values below are default\n              prompt: {\n                user: 'root',\n                host: 'localhost',\n                global: false,\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n\nexport default config\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["require","_index","config","siteMetadata","title","description","siteUrl","image","twitterUsername","graphqlTypegen","plugins","resolve","options","name","short_name","start_url","background_color","colors","darkNavy","theme_color","navy","display","icon","path","$parcel$__dirname","target","rel","maxWidth","linkImagesToOriginal","quality","tracedSVG","color","green","classPrefix","inlineCodeMarker","aliases","showLineNumbers","noInlineHighlight","languageExtensions","language","extend","definition","superscript_types","insertBefore","function","superscript_keywords","prompt","user","host","global","exports","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","value","exportAll","source","dest","keys","forEach","key","hasOwnProperty","enumerable","get","export","destName"],"version":3,"file":"gatsby-config.js.map","sourceRoot":"../../"}